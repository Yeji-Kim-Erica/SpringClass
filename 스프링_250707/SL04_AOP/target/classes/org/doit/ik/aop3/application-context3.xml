<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<context:component-scan base-package="org.doit.ik.aop3" />
	
	<!-- Aspect 설정 : Advice를 어떤 Pointcut에 적용할 지 설정 -->
	<aop:config>
		<aop:aspect id="traceAspect" ref="logPrintProfiler3">
		
			<aop:pointcut expression="execution(* org.doit.ik.aop..*.*(*,*))" id="calcPointCut" />
		
			<!-- BeforeAdvice -->
			<aop:before method="before" pointcut-ref="calcPointCut"/>
			
			<!-- AroundAdvice -->
			<!-- p.250 포인트컷 : AspectJ 문법 설명 -->
			<aop:around method="trace" pointcut-ref="calcPointCut" /> <!-- pointcut 안의 내용 : 정규표현식 또는 aspectj 문법 -->
			
			<!-- AfterRetruningAdvice -->
			<aop:after-returning method="afterReturning" pointcut-ref="calcPointCut" returning="result"/>
			
		</aop:aspect>
	</aop:config>

</beans>



