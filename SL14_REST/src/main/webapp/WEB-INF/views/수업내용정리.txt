[수업 내용 정리] (강사님 자료 참고할 것)

SL00_DefaultSettings → SL14_REST

1. REST (Representational State Transfer) - Ajax 처리에 자주 사용됨
	ㄴ 웹 기반 어플리케이션에서 자원을 효율적으로 관리하고 전달하기 위한 소프트웨어
	ㄴ HTTP 프로토콜을 기반으로 한 웹 설계 API 설계에 사용된다.
	ㄴ 모든 웹 상의 자원 (이미지, 게시글, 사용자 등등)
	ㄴ URL / URI
		: URL은 URI의 하위 개념. URL은 location까지만, 실제 자원을 가리키는 identifier가 URI
	ㄴ 각각의 자원은 고유한 URI()로 식별됨.
	ㄴ REST = 하나의 고유 자원을 나타내는 URI + 전송 방식(GET, POST, PUT, DELETE)이 결합되어 하나의 작업을 지정한다.
	
	예)  http://localhost/members/new + POST 회원등록 요청
	예)  http://localhost/members/{id} + GET  id 회원정보 얻어오기
	예)  http://localhost/members/{id} + DELETE  id 회원정보 삭제
	예)  http://localhost/members/{id} + PUT    id 회원정보 수정

● REST의 기본 개념
	1. 자원(Resource)
	서버가 관리하는 모든 것(문서, 이미지, 사용자, 서비스 등)을 ‘자원’이라 부릅니다.
	
	2. 식별(Identification)
	각 자원은 고유한 URI(Uniform Resource Identifier, 예: https://api.example.com/users/123)로 식별됩니다.
	
	3. 표현(Representation)
	클라이언트는 자원의 상태를 JSON, XML, HTML 등의 형태로 표현된 ‘표현(Representation)’을 주고받습니다.

2. REST 어노테이션
	1) @RestController - Controller가 REST 방식을 처리한다.
		@RestController = @Controller + @ResponseBody
	2) @ResponseBody - 일반적으로 뷰(jsp)를 사용한다
								ㄴ 데이터 자체를 사용(전달)한다.
	3) @PathVariable - 경로(URI) 속에 있는 파라미터 값을 추출하는 어노테이션
	4) @RequestBody - 요청 파라미터를 자바 객체로 바인딩 처리
						ㄴ 예) JSON → Notice.java 객체
	5) @CrossOrigin
	
3. pom.xml에 모듈 추가
	1) 자바 객체 → JSON/XML로 변환시키는 의존 모듈 
	
      <dependency>
         <groupId>com.fasterxml.jackson.core</groupId>
         <artifactId>jackson-databind</artifactId>
         <version>2.9.5</version>
      </dependency>
      
      <!-- XML 처리를 하기 위한 모듈 -->
      <dependency>
         <groupId>com.fasterxml.jackson.dataformat</groupId>
         <artifactId>jackson-dataformat-xml</artifactId>
         <version>2.9.5</version>
      </dependency>
      
     2) 단위 테스트할 때
     	EmpVO 자바 객체 → JSON 데이터로 변환시켜서 → ajax 요청 시 파라미터로 
     	
		<dependency>
			
		</dependency>
		
		main(){
			EmpVO vo = new EmpVO();
			vo -> json 객체로 변환
			// ajax 요청 + json vo 사용할 때 테스트 용도
		}
		
4. 실습
	1) SampleController.java
	2) 단순한 문자열 반환 (응답) - home.jsp
	3) 객체를 반환 (JSON, XML)
		domain.SampleVO.java
	4) List<SampleVO> 컬렉션으로 반환
	
	- 응답 받은 링크에 .json 붙이면 json 자료로 돌려줌

5. REST 테스트 + 앱 설치
     	
--------------------------
2025.07.18
--------------------------
1. 실습
   예)  http://localhost/dept         + GET   	부서목록조회
   예)  http://localhost/dept         + POST 	부서추가
   예)  http://localhost/dept/{deptno} + GET   	부서상세조회
   예)  http://localhost/dept/{deptno} + PUT   	부서수정
   예)  http://localhost/dept/{deptno} + DELETE	부서삭제
   
   1) DeptController.java
   2) DeptVO.java    
   3) DeptMapper.java
       DeptMapper.xml
   4) YARC 로 테스트    
   4) dept/.jsp  구현예정

























