<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
	
	<!-- p682 css, js, image, static(정적) 등등	보안 필터 체인 X -->	
	<security:http pattern="/static/**" security="none"></security:http>	
	<security:http pattern="/design/**" security="none"></security:http>
	<security:http pattern="/css/**" security="none"></security:http>
	<security:http pattern="/js/**" security="none"></security:http> 		
		
	<!-- p 681 접근 제어 태그, 식을 사용 여부 -->
	<security:http use-expressions="true">
	  <security:intercept-url pattern="/customer/noticeReg.htm" access="isAuthenticated()" />
	  <!-- 
	  이렇게 설정하면 작성자도 삭제 못함	  
	  <security:intercept-url pattern="/customer/noticeDel.htm" access="hasRole('ROLE_ADMIN')" />
	  그래서 아래와 같이 인증하면 접근하도록 허용하고
	  컨트롤러에서 직접 권한 확인~ 
	   -->
	   
	  <!-- 동일한 코딩
	  <security:intercept-url pattern="/customer/noticeDel.htm" access="hasRole('ROLE_USER')"  /> -->
	  <security:intercept-url pattern="/customer/noticeDel.htm" access="isAuthenticated()" />
	   
	  <security:intercept-url pattern="/**" access="permitAll" />
	
	  <security:form-login
	      login-page="/joinus/login.htm"
	      default-target-url="/index.htm"
	      authentication-failure-url="/joinus/login.htm?error=true"
	      authentication-success-handler-ref="customLoginSuccessHandler"
	      username-parameter="username"
	      password-parameter="password"
	  />
	  
	  <!-- [1] hong 인증 -> 삭제 버튼    403 접근 금지 오류 : 특정 URL 이동..
	       ㄴ  /common/accessError.htm 요청을 처리하는 CommonController.java
	   -->
	  <!-- 
	     <security:access-denied-handler error-page="/common/accessError.htm" /> 
	  -->
	  <!-- 	[2]  
	  접근 제한이 발생한 경우 다양한 처리를 하고 싶다면  AccessDenidedHandler 
	  인터페이스를 구현
	   org.doit.ik.security.CustomAccessDeniedHandler.java
	   -->
	   <security:access-denied-handler ref="customAccessDeniedHandler" />
	   
	   <security:logout 
	   invalidate-session="true" 
	   logout-success-url="/" 
	   logout-url="/joinus/logout.htm"
	   
	   delete-cookies="remember-me,JSESSION_ID"
	    />
	   <!-- 로그 아웃 성공시 다양한 처리를 하기를 원한다면 .. 클래스 선언 후 빈 등록하면 된다. 
	   success-handler-ref="logoutSuccessHandler" -->
	  
	   <!-- 자동로그인 -->
	   <security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" /> <!-- 7일 == 604800초 -->
	  
	</security:http>
	
	<!-- PasswordEncoder -->
	<bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	
     <!-- p684 -->
	<security:authentication-manager>	 
	  <security:authentication-provider user-service-ref="customUserDetailsService">
	    <security:password-encoder ref="bCryptPasswordEncoder" />
	  </security:authentication-provider>
	</security:authentication-manager>
		
	<!-- 	
	CSRF토큰 비활성	
	<security:csrf disabled="true"/>
	 -->	
</beans>







