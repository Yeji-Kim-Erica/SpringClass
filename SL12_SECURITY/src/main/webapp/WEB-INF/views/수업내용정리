[수업내용정리] p.654 스프링 시큐리티를 이용한 웹 보안

SL11_MYBATIS -> SL12_SECURITY

● 보안 요구
	1) 역할의 종류: ROLE_USER, ROLE_MANAGER, ROLE_ADMIN
	2) 경로별 접근 제한
		(1) /customer/noticeReg.htm (공지사항 작성) : 인증된 사용자만 접근 가능
		(2) /customer/noticeEdit.htm (공지사항 수정),
			/customer/noticeDel.htm (공지사항 삭제) : 작성자로 인증, 관리자만 접근 가능
		(3) 그 외의 요청은 모든 사용자에게 허용 : 인증 X, 권한 X
		
● 시큐리티 내부 구조 (암기할 것)
	1) AuthenticationManager (인증관리자)
		- 가장 중요한 역할
		- 인증을 담당하는 존재
		- 인터페이스
		- 다양한 인증 방식으로 인증 처리를 할 수 있음
		
	2) ProviderManager (제공관리자)
		- 인증을 처리하는 실제 객체(AuthenticationManager)에게 인증 처리를 위임하는 역할
		- 인터페이스
	
	3) AuthenticationProvider (인증제공자)
		- 실제 인증 처리를 하는 역할 (실무자)
	
	4) UserDetailsService (사용자 상세서비스)
		- 인증된 실제 사용자의 정보 및 권한 정보를 처리해서 반환하는 객체
		- 인터페이스

● 실습
	1. pom.xml 의존 모듈 확인
	- pom.xml
		
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-taglibs -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
	
	2. security-context.xml 추가
	- src/main/webapp/WEB-INF/spring 폴더
		ㄴ security-context.xml 생성
		
			<?xml version="1.0" encoding="UTF-8"?>
			<beans xmlns="http://www.springframework.org/schema/beans"
			   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			   xmlns:security="http://www.springframework.org/schema/security"
			   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
			      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
			</beans>
		
	3. web.xml에 내용 추가
		- <context-param>에 내용 추가 : /WEB-INF/spring/security-context.xml
	
			<context-param>
				<param-name>contextConfigLocation</param-name>
				<param-value>
					/WEB-INF/spring/root-context.xml
					/WEB-INF/spring/security-context.xml
				</param-value>
			</context-param>

	4. web.xml에 내용 추가
		- <filter> 추가
		
			<filter>
				<filter-name>springSecurityFilterChain</filter-name>
				<filter-class>
					org.springframework.web.filter.DelegatingFilterProxy
				</filter-class>
			</filter>
			<filter-mapping>
				<filter-name>springSecurityFilterChain</filter-name>
				<url-pattern>/*</url-pattern>
			</filter-mapping>
		
	5. security-context.xml에 내용 추가
		- 서버 실행 시 오류 발생
		SEVERE: 필터 [springSecurityFilterChain]을(를) 시작하는 중 오류 발생
		org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'springSecurityFilterChain' available
		
		- 해결을 위해 코딩 추가
			: 스프링 시큐리티가 동작하기 위해서는...
			  1) authentication-manager 등록
			  2) 스프링 시큐리티의 시작지점이 필요
				
			<security:http>
				<security:form-login/>
			</security:http>
			
			<security:authentication-manager>
			</security:authentication-manager>

	6. security-context.xml 내용 추가 및 수정
		- 일부 경로 보안 필터 적용 X
		
			<security:http pattern="/static/**" security="none"></security:http>
			<security:http pattern="/design/**" security="none"></security:http>
			<security:http pattern="/css/**" security="none"></security:http>
			<security:http pattern="/js/**" security="none"></security:http>
	
		- security:authentication-manager 에 내용 추가
		
			<!-- 인증 관리자 : 총괄 책임자 -->
			<security:authentication-manager>
				<!-- 인증 제공자 : 실무자 -->
				<security:authentication-provider>
					<security:user-service>
						<security:user name="hong" authorities="ROLE_USER" password="1234"/>
						<security:user name="admin" authorities="ROLE_USER, ROLE_MANAGER, ROLE_ADMIN" password="1234"/>
					</security:user-service>
				</security:authentication-provider>
			</security:authentication-manager>
			
		- 접근 제어를 위한 설정 코드
	
	7. 

● 실습 적용 (실행)
	security-context.xml
	
	<security:access-denied-handler />
	1) hong 로그인 후 -> 삭제 버튼 -> HTTP 상태 403 - 금지됨 오류 발생 (권한없음)
	2) 사용자 직접 접근 제한에 대한 특정 URI를 지정해서 처리할 수 있다.
	
	<security:form-login />
	3) 커스텀 로그인 페이지를 사용하도록 구현
		login-page = "/joinus/login.htm"
	4) 로그인 실패 처리
		default-target-url="/index.htm" (로그인 성공 시)
		authentication-failure-url="/joinus/login.htm?error=true" (로그인 실패 시)
	5) 로그인 성공한 경우 특정 처리 작업
		authentication-success-handler-ref="customLoginSuccessHandler"
		- 일반 사용자 로그인 성공 -> 일반 -> 기본 URL 이동
		- 관리자 로그인 성공 -> 관리자 -> 특정 처리 (추가) -> 기본 URL 이동

	header.jsp : 로그인 상태에 따른 헤더 상태 관리
	
		<li>
			<!-- 인증을 받지 않은 경우 : isAnonymous() -->
			<sec:authorize access="isAnonymous()">
				<a href="${pageContext.request.contextPath}/joinus/login.htm">로그인</a>
			</sec:authorize>
			<!-- 인증을 받은 경우 : isAuthenticated() -->
			<sec:authorize access="isAuthenticated()">
				<form action="${pageContext.request.contextPath}/joinus/logout.htm" method="POST">
					[<sec:authentication property="principal.username"/>] 님
					<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}">
					<button type="submit">로그아웃</button>
				</form>
			</sec:authorize>
		</li>
	
	6) 로그아웃
		<security:logout invalidate-session="true" logout-success-url="/" logout-url="/joinus/logout.htm" />

----------------------------------------













































			